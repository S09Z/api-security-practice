server {
    listen 443 ssl;
    server_name oauthserver.com;

    # ðŸ”¹ SSL Configuration (Use Certbot or custom SSL certificates)
    ssl_certificate /etc/letsencrypt/live/oauthserver.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/oauthserver.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305";
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # ðŸ”¹ Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name oauthserver.com;
        return 301 https://$host$request_uri;
    }

    # ðŸ”¹ Validate Redirect URI (Prevent Open Redirect Attacks)
    location /authorize {
        if ($arg_redirect_uri !~* "^https://(trustedapp\.com|secureapp\.com)/callback$") {
            return 403;
        }
        proxy_pass http://127.0.0.1:8000;
    }

    # ðŸ”¹ Block Implicit Grant Flow (Prevent Token Exposure in URL)
    location /authorize {
        if ($arg_response_type = "token") {
            return 403;
        }
        proxy_pass http://127.0.0.1:8000;
    }

    # ðŸ”¹ Require State Parameter (Prevent CSRF Attacks)
    location /authorize {
        if ($arg_state = "") {
            return 403;
        }
        proxy_pass http://127.0.0.1:8000;
    }

    # ðŸ”¹ Validate Scope (Prevent Over-privileged Requests)
    location /authorize {
        if ($arg_scope !~* "openid|profile|email|read:data|write:data") {
            return 403;
        }
        proxy_pass http://127.0.0.1:8000;
    }

    # ðŸ”¹ Restrict Directory Listings (Security Hardening)
    location /static/ {
        root /var/www/html;
        autoindex off;
    }

    # ðŸ”¹ Proxy to FastAPI OAuth Server
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto https;
    }
}
