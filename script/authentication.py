"""
üöÄ API Security - Authentication Cheatsheet üöÄ
üîπ ‡∏£‡∏ß‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á API Authentication
üîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Python
"""

import bcrypt
import jwt
import os
import hashlib
import requests
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from argon2 import PasswordHasher

# ==============================
# 1Ô∏è‚É£ Secure Password Storage üõ°Ô∏è
# ==============================

# ‚úÖ ‡πÉ‡∏ä‡πâ bcrypt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
def hash_password_bcrypt(password: str) -> str:
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode(), salt)
    return hashed_password

# ‚úÖ ‡πÉ‡∏ä‡πâ Argon2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
def hash_password_argon2(password: str) -> str:
    ph = PasswordHasher()
    return ph.hash(password)

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Æ‡∏ä
def verify_password_argon2(hashed_password: str, password: str) -> bool:
    ph = PasswordHasher()
    try:
        return ph.verify(hashed_password, password)
    except:
        return False


# ===================================
# 2Ô∏è‚É£ JWT (JSON Web Token) üîë
# ===================================
SECRET_KEY = "supersecretkey"

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
def generate_jwt(user_id: int) -> str:
    payload = {"user_id": user_id}
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token
def verify_jwt(token: str) -> dict:
    try:
        return jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
    except jwt.ExpiredSignatureError:
        return {"error": "Token expired"}
    except jwt.InvalidTokenError:
        return {"error": "Invalid token"}


# ===================================
# 3Ô∏è‚É£ AES Symmetric Encryption üîí
# ===================================
def encrypt_data_aes(data: str, key: bytes) -> tuple:
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(data.encode())
    return (cipher.nonce, ciphertext, tag)

def decrypt_data_aes(nonce: bytes, ciphertext: bytes, tag: bytes, key: bytes) -> str:
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    return cipher.decrypt_and_verify(ciphertext, tag).decode()


# ===================================
# 4Ô∏è‚É£ RSA Asymmetric Encryption üîê
# ===================================
def generate_rsa_keys():
    key = RSA.generate(2048)
    return key.export_key(), key.publickey().export_key()

def encrypt_rsa(data: str, public_key: bytes) -> bytes:
    cipher = PKCS1_OAEP.new(RSA.import_key(public_key))
    return cipher.encrypt(data.encode())

def decrypt_rsa(ciphertext: bytes, private_key: bytes) -> str:
    cipher = PKCS1_OAEP.new(RSA.import_key(private_key))
    return cipher.decrypt(ciphertext).decode()


# ===================================
# 5Ô∏è‚É£ Protect Against Common Attacks üõ°Ô∏è
# ===================================

# ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Rainbow Table Attack ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Salt + Hashing
def secure_hash(password: str, salt: bytes) -> str:
    return hashlib.scrypt(password.encode(), salt=salt, n=16384, r=8, p=1).hex()

# ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Credential Stuffing ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß‡πÑ‡∏´‡∏•
def check_password_leak(password: str):
    response = requests.get(f"https://api.pwnedpasswords.com/range/{password[:5]}")
    if password in response.text:
        return "‚ö†Ô∏è Password has been leaked! Change it immediately."
    return "‚úÖ Password is safe."

# ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Session Hijacking ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Secure Cookies
def set_secure_cookie(response):
    response.set_cookie("session", "securetoken", httponly=True, secure=True, samesite="Strict")


# ===================================
# 6Ô∏è‚É£ Implement Two-Factor Authentication (2FA) üî¢
# ===================================
import pyotp

def generate_2fa_secret():
    return pyotp.random_base32()

def generate_otp(secret: str):
    totp = pyotp.TOTP(secret)
    return totp.now()

def verify_otp(secret: str, otp: str):
    totp = pyotp.TOTP(secret)
    return totp.verify(otp)


# ===================================
# 7Ô∏è‚É£ Secure API Authentication üõ°Ô∏è
# ===================================
from flask import Flask, request, jsonify

app = Flask(__name__)

users_db = {"user1": hash_password_argon2("securepassword")}

@app.route("/login", methods=["POST"])
def login():
    data = request.json
    username, password = data["username"], data["password"]

    if username in users_db and verify_password_argon2(users_db[username], password):
        token = generate_jwt(username)
        response = jsonify({"message": "Login successful", "token": token})
        set_secure_cookie(response)
        return response
    return jsonify({"error": "Invalid credentials"}), 401

@app.route("/protected", methods=["GET"])
def protected():
    token = request.headers.get("Authorization")
    if token:
        token = token.split("Bearer ")[-1]
        decoded = verify_jwt(token)
        if "user_id" in decoded:
            return jsonify({"message": "Access granted", "user": decoded["user_id"]})
    return jsonify({"error": "Unauthorized"}), 403


# ===================================
# 8Ô∏è‚É£ Secure Key Management üîë
# ===================================
def store_encryption_key():
    """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ AWS KMS ‡∏´‡∏£‡∏∑‡∏≠ Google Cloud KMS"""
    return os.urandom(32)  # ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AES


# ===================================
# 9Ô∏è‚É£ Security Best Practices üî•
# ===================================

"""
‚úÖ **Password Storage**
   - ‡πÉ‡∏ä‡πâ **bcrypt ‡∏´‡∏£‡∏∑‡∏≠ Argon2** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
   - ‡πÉ‡∏ä‡πâ **Salt** ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Rainbow Table Attacks
   - ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô plain text!

‚úÖ **Authentication**
   - ‡πÉ‡∏ä‡πâ **JWT + Secure Cookies**
   - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö **Multi-Factor Authentication (2FA)**

‚úÖ **API Security**
   - ‡πÉ‡∏ä‡πâ **HTTPS** ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
   - ‡πÉ‡∏ä‡πâ **Rate Limiting & Max Retry**
   - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ **Access Control (RBAC, ABAC)**

‚úÖ **Sensitive Data Encryption**
   - ‡πÉ‡∏ä‡πâ **AES-256** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
   - ‡πÉ‡∏ä‡πâ **RSA-2048 ‡∏´‡∏£‡∏∑‡∏≠ ECC-256** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
   - ‡πÉ‡∏ä‡πâ **Key Management System (AWS KMS, Google Cloud KMS)**

‚úÖ **Preventing Common Attacks**
   - ‡πÉ‡∏ä‡πâ **Secure & HttpOnly Cookies** ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Session Hijacking
   - ‡πÉ‡∏ä‡πâ **CSRF Tokens** ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Cross-Site Request Forgery
   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡πà‡∏ß‡πÑ‡∏´‡∏• (Have I Been Pwned API)
"""

# ===================================
# Run Flask API (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
# ===================================
if __name__ == "__main__":
    app.run(debug=True)
